[{
  "slug": "semantic-elements",
  "title": "Semantic elements",
  "description": "Layout helps define the hierarchy and flow of content in interfaces. While styling does this visually, section level elements including divs, headers, and footers help semantically describe your interface.",
  "component": "SemanticElements"
}, {
  "slug": "separating-concerns",
  "title": "Separating concerns",
  "description": "An important concept for successful layouts is to separate implementation details internally and remove all external layout values from individual components. Another way to think about this is “abstracting layout considerations up the DOM tree”.",
  "component": "SeparatingConcerns"
}, {
  "slug": "layout-shift",
  "title": "Layout shift",
  "description": "If you’ve done any site profiling in the past, you will probably know the term Cumulative Layout Shift, which measures how much a web page’s layout shifts after initial load and during use. Due to the nature of how web pages are loaded, layout shift isn’t completely avoidable. But it can be minimized.",
  "component": "LayoutShift"
}, {
  "slug": "block-inline-axes",
  "title": "Block and inline axes",
  "description": "When learning about layout on the web and how elements flow, you will come across the terms **block axis** and **inline axis**. Since the web can be viewed in different writing modes and orientations, these names are meant to avoid relating to physical edges such as “top”, “left”, etc.",
  "component": "BlockInlineAxes"
}, {
  "slug": "box-sizing",
  "title": "Box sizing",
  "description": "The size of elements on the web can be calculated in two ways: using the content box sizing model or the border box sizing model. By default, content box sizing is used to calculate most element’s dimensions, but not all. Table, select, button, and input elements all use border box sizing by default.",
  "component": "BoxSizing"
}, {
  "slug": "display-modes",
  "title": "Display modes",
  "description": "Elements can set both their external and internal layout modes via the CSS **display** property. External layout values indicate how an element will render alongside sibling elements in a container while internal layout values indicate how descendants of the element will render.",
  "component": "DisplayModes"
}, {
  "slug": "setting-dimensions",
  "title": "Setting dimensions",
  "description": "",
  "component": "SettingDimensions"
}, {
  "slug": "spacing",
  "title": "Spacing",
  "description": "",
  "component": "Spacing"
}, {
  "slug": "positioning-elements",
  "title": "Positioning elements",
  "description": "",
  "component": "PositioningElements"
}, {
  "slug": "aspect-ratios",
  "title": "Aspect ratios",
  "description": "",
  "component": "AspectRatios"
}, {
  "slug": "flexible-layouts",
  "title": "Flexible layouts",
  "description": "",
  "component": "FlexLayouts"
}, {
  "slug": "grid-layouts",
  "title": "Grid layouts",
  "description": "",
  "component": "GridLayouts"
}, {
  "slug": "viewport-units",
  "title": "Viewport units",
  "description": "",
  "component": "ViewportUnits"
}, {
  "slug": "responsive-queries",
  "title": "Responsive queries",
  "description": "",
  "component": "ResponsiveQueries"
}, {
  "slug": "logical-properties",
  "title": "Logical properties",
  "description": "",
  "component": "LogicalProperties"
}]